<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>63.0</apiVersion>
    <areMetricsLoggedToDataCloud>false</areMetricsLoggedToDataCloud>
    <decisions>
        <name>CheckDeletedWorkAreaPublicGroupExists</name>
        <label>Check Deleted WorkArea Public Group Exists</label>
        <locationX>2019</locationX>
        <locationY>647</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>DeletedWorkAreaPublicGroupExists</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetDeletedWorkAreaPublicGroup</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>GetDeletedWorkAreaPublicGroupSharingRecord</targetReference>
            </connector>
            <label>Deleted WorkArea Public Group Exists</label>
        </rules>
    </decisions>
    <decisions>
        <name>CheckDeletedWorkAreaPublicGroupSharingExists</name>
        <label>Check Deleted WorkArea Public Group Sharing Exists</label>
        <locationX>1821</locationX>
        <locationY>863</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>DeletedWorkAreaPublicGroupSharingExists</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetDeletedWorkAreaPublicGroupSharingRecord</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>DeleteOldAccountSharing1</targetReference>
            </connector>
            <label>Deleted WorkArea Public Group Sharing Exists</label>
        </rules>
    </decisions>
    <decisions>
        <name>CheckIftheAccountisNew</name>
        <label>Check If the Account is New</label>
        <locationX>1133</locationX>
        <locationY>323</locationY>
        <defaultConnector>
            <targetReference>IsWorkAreaUpdated</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Account Updated</defaultConnectorLabel>
        <rules>
            <name>AccountIsNew</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>ISNEW</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>IsWorkAreaPopulated</targetReference>
            </connector>
            <label>Account is New</label>
        </rules>
    </decisions>
    <decisions>
        <name>CheckNewWorkAreaPublicGroupExists</name>
        <label>Check New WorkArea Public Group Exists</label>
        <locationX>1293</locationX>
        <locationY>1547</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>NewWorkAreaPublicGroupExists</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetNewWorkAreaPublicGroup</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>CreateNewAccountSharing</targetReference>
            </connector>
            <label>New WorkArea Public Group Exists</label>
        </rules>
    </decisions>
    <decisions>
        <name>CheckOldSharingExists</name>
        <label>Check Old Sharing Exists</label>
        <locationX>974</locationX>
        <locationY>971</locationY>
        <defaultConnector>
            <targetReference>GetNewWorkAreaPublicGroup</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>OldSharingExists</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetOldAccountSharingRecord</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>DeleteOldAccountSharing</targetReference>
            </connector>
            <label>OldSharingExists</label>
        </rules>
    </decisions>
    <decisions>
        <name>CheckOldWorkAreaPopulated</name>
        <label>Check Old WorkArea Populated</label>
        <locationX>1293</locationX>
        <locationY>539</locationY>
        <defaultConnector>
            <targetReference>GetNewWorkAreaPublicGroup</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>OldWorkAreaPopulated</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record__Prior.Work_Area__c</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>GetOldWorkAreaPublicGroup</targetReference>
            </connector>
            <label>OldWorkAreaPopulated</label>
        </rules>
    </decisions>
    <decisions>
        <name>CheckOldWorkAreaPublicGroupExists</name>
        <label>Check Old WorkArea Public Group Exists</label>
        <locationX>1128</locationX>
        <locationY>755</locationY>
        <defaultConnector>
            <targetReference>GetNewWorkAreaPublicGroup</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>OldWorkAreaPublicGroupExists</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetOldWorkAreaPublicGroup</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>GetOldAccountSharingRecord</targetReference>
            </connector>
            <label>Old WorkArea Public Group Exists</label>
        </rules>
    </decisions>
    <decisions>
        <name>IsWorkAreaPopulated</name>
        <label>Is Work Area Populated</label>
        <locationX>380</locationX>
        <locationY>431</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>WorkAreaPopulated</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Work_Area__c</leftValueReference>
                <operator>IsBlank</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Work_Area__r.Public_Group_Id__c</leftValueReference>
                <operator>IsBlank</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>GetRelatedPublicGroup</targetReference>
            </connector>
            <label>WorkAreaPopulated</label>
        </rules>
    </decisions>
    <decisions>
        <name>IsWorkAreaUpdated</name>
        <label>Is WorkArea Updated</label>
        <locationX>1887</locationX>
        <locationY>431</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>WorkAreaUpdated</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Work_Area__c</leftValueReference>
                <operator>IsChanged</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Work_Area__c</leftValueReference>
                <operator>IsBlank</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>CheckOldWorkAreaPopulated</targetReference>
            </connector>
            <label>WorkArea Updated</label>
        </rules>
        <rules>
            <name>WorkAreaRemoved</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Work_Area__c</leftValueReference>
                <operator>IsChanged</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Work_Area__c</leftValueReference>
                <operator>IsBlank</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record__Prior.Work_Area__c</leftValueReference>
                <operator>IsBlank</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>GetDeletedWorkAreaPublicGroup</targetReference>
            </connector>
            <label>WorkArea Removed</label>
        </rules>
    </decisions>
    <decisions>
        <name>NewRecordPublicGroupExists</name>
        <label>New Record Public Group Exists</label>
        <locationX>182</locationX>
        <locationY>647</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>PublicGroupExists</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetRelatedPublicGroup</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>CreateAccountSharing</targetReference>
            </connector>
            <label>PublicGroupExists</label>
        </rules>
    </decisions>
    <environments>Default</environments>
    <formulas>
        <name>ISNEW</name>
        <dataType>Boolean</dataType>
        <expression>ISNEW()</expression>
    </formulas>
    <interviewLabel>ShareAccountWithWorkAreaPublicGroup {!$Flow.CurrentDateTime}</interviewLabel>
    <label>Account Sharing With WorkArea Public Group</label>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>AUTO_LAYOUT_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>AutoLaunchedFlow</processType>
    <recordCreates>
        <name>CreateAccountSharing</name>
        <label>Create AccountSharing</label>
        <locationX>50</locationX>
        <locationY>755</locationY>
        <inputAssignments>
            <field>AccountAccessLevel</field>
            <value>
                <stringValue>Edit</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>AccountId</field>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>OpportunityAccessLevel</field>
            <value>
                <stringValue>Read</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>UserOrGroupId</field>
            <value>
                <elementReference>GetRelatedPublicGroup.Id</elementReference>
            </value>
        </inputAssignments>
        <object>AccountShare</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordCreates>
    <recordCreates>
        <name>CreateNewAccountSharing</name>
        <label>Create New Account Sharing</label>
        <locationX>1161</locationX>
        <locationY>1655</locationY>
        <inputAssignments>
            <field>AccountAccessLevel</field>
            <value>
                <stringValue>Edit</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>AccountId</field>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>OpportunityAccessLevel</field>
            <value>
                <stringValue>Read</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>UserOrGroupId</field>
            <value>
                <elementReference>GetNewWorkAreaPublicGroup.Id</elementReference>
            </value>
        </inputAssignments>
        <object>AccountShare</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordCreates>
    <recordDeletes>
        <name>DeleteOldAccountSharing</name>
        <label>Delete Old Account Sharing</label>
        <locationX>842</locationX>
        <locationY>1079</locationY>
        <connector>
            <targetReference>GetNewWorkAreaPublicGroup</targetReference>
        </connector>
        <inputReference>GetOldAccountSharingRecord</inputReference>
    </recordDeletes>
    <recordDeletes>
        <name>DeleteOldAccountSharing1</name>
        <label>Delete Old Account Sharing</label>
        <locationX>1689</locationX>
        <locationY>971</locationY>
        <inputReference>GetDeletedWorkAreaPublicGroupSharingRecord</inputReference>
    </recordDeletes>
    <recordLookups>
        <name>GetDeletedWorkAreaPublicGroup</name>
        <label>Get Deleted WorkArea Public Group</label>
        <locationX>2019</locationX>
        <locationY>539</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>CheckDeletedWorkAreaPublicGroupExists</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record__Prior.Work_Area__r.Public_Group_Id__c</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Group</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>GetDeletedWorkAreaPublicGroupSharingRecord</name>
        <label>GetDeletedWorkAreaPublicGroupSharingRecord</label>
        <locationX>1821</locationX>
        <locationY>755</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>CheckDeletedWorkAreaPublicGroupSharingExists</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>AccountId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </filters>
        <filters>
            <field>UserOrGroupId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetDeletedWorkAreaPublicGroupSharingRecord.UserOrGroupId</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>AccountShare</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>GetNewWorkAreaPublicGroup</name>
        <label>Get New WorkArea Public Group</label>
        <locationX>1293</locationX>
        <locationY>1439</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>CheckNewWorkAreaPublicGroupExists</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.Work_Area__r.Public_Group_Id__c</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Group</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>GetOldAccountSharingRecord</name>
        <label>Get Old Account Sharing Record</label>
        <locationX>974</locationX>
        <locationY>863</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>CheckOldSharingExists</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>AccountId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </filters>
        <filters>
            <field>UserOrGroupId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>GetOldWorkAreaPublicGroup.Id</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>AccountShare</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>GetOldWorkAreaPublicGroup</name>
        <label>Get Old WorkArea Public Group</label>
        <locationX>1128</locationX>
        <locationY>647</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>CheckOldWorkAreaPublicGroupExists</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record__Prior.Work_Area__r.Public_Group_Id__c</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Group</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>GetRelatedPublicGroup</name>
        <label>Get Related Public Group</label>
        <locationX>182</locationX>
        <locationY>539</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>NewRecordPublicGroupExists</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.Work_Area__r.Public_Group_Id__c</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Group</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <start>
        <locationX>1007</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>CheckIftheAccountisNew</targetReference>
        </connector>
        <object>Account</object>
        <recordTriggerType>CreateAndUpdate</recordTriggerType>
        <triggerType>RecordAfterSave</triggerType>
    </start>
    <status>Active</status>
</Flow>
